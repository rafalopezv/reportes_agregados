
# sobre: compilación de ciclos

library(highcharter)
library(tidyverse)
library(magrittr)
library(reactable)
library(dplyr)

bases <- list.files(recursive = T)
bases <- bases[grep("FRR/ciclo_", bases)]
bases <- bases[grep("xlsx", bases)]
bases <- bases[grep("Pulsante_ todas las propuestas FRR 2020", bases, invert = T)]

# ordenar
bases <- bases[c(1, 8, 9:15, 2:7)]

datos1 <- rio::import_list(bases[1], rbind = T)
datos2 <- rio::import_list(bases[2], rbind = T)
datos3 <- map(bases[3:15], rio::import) %>% map(., janitor::clean_names)
datos <- list(datos1, datos2)
datos <- c(datos, datos3)

# añadir columna de ciclo
for(i in 1:length(datos)) {
  datos[[i]] %<>%
    mutate(ciclo = i)
}

# temas por país
extraer <- c("tema",  "menciona_el_pais_o_paises_donde_se_realizara_el_proyecto_puedes_elegir_mas_de_un_pais", "ciclo")
map_dfr(datos[3:15], ~extract(., extraer)) %>% 
  rename(
    pais = menciona_el_pais_o_paises_donde_se_realizara_el_proyecto_puedes_elegir_mas_de_un_pais
  ) %>% 
  separate_rows(pais, sep = ",") -> temp


# temas ciclo 1
c1 <- rio::import("input/temas.csv") %>% 
  select(pais, tema) 

c1 %>% 
  separate_rows(pais) -> c1


c1 %>% 
  filter(
    pais != "El",
    pais != "y",
    pais != "Rica",
    pais != "Latinoamérica",
    pais != "Dominicana",
    pais != "España"
  ) -> c1


temp1 <- which(c1$pais == "Paragua")
c1[temp1, "pais"] <- "Paraguay" 

temp1 <- which(c1$pais == "Costa")
c1[temp1, "pais"] <- "Costa Rica" 

temp1 <- which(c1$pais == "República")
c1[temp1, "pais"] <- "República Dominicana" 

temp %<>% 
  bind_rows(., c1) 

temp1 <- which(temp$pais == "Bolívia")
temp[temp1, "pais"] <- "Bolivia" 

temp1 <- which(temp$pais == "Brazil")
temp[temp1, "pais"] <- "Brasil" 

temp1 <- which(temp$pais == "Haiti")
temp[temp1, "pais"] <- "Haití"

temp1 <- which(temp$pais == "Peru")
temp[temp1, "pais"] <- "Perú"

temp1 <- which(temp$pais == "Salvador")
temp[temp1, "pais"] <- "El Salvador"

# agragdor
agregado <- rio::import("input/temas_grandes.csv")

temp %<>% 
  merge(., agregado, all.x = T) %>% 
  filter(!is.na(agregado))

temp %>% 
  count(agregado, tema) %>% 
  arrange(desc(n)) %>% 
  remove_missing() %>% 
  mutate(prop = prop.table(n)*100) -> temp1

# colores
cols <- rep(c("#E01F52", "#C6A659", "#06D6A0", "#466B77", "#073B4C", 
              "#D8B970", "#5FA1B7", "#118AB2", "#BAAB89", "#1E4D5C", 
              "#2C6E49", "#E07A5F", "#3D405B", "#81B29A", "#63585F", 
              "#B4B5BA", "#261F23", "#575D7C", "#9194C6", "#75184D"), 3)


temp1 %>% 
  select(agregado) %>% 
  unique() %>% 
  mutate(
    color = cols[1:nrow(.)]
  ) %>% 
  left_join(., temp1) -> temp1
  
  
lvl_opts <-  list(
  list(
    level = 1,
    borderWidth = 0,
    borderColor = "transparent",
    dataLabels = list(
      enabled = TRUE,
      align = "left",
      verticalAlign = "top",
      style = list(fontSize = "16px", textOutline = FALSE, color = "black")
    )
  ),
  list(
    level = 2,
    borderWidth = 0,
    borderColor = "transparent",
    colorVariation = list(key = "brightness", to = 0.250),
    dataLabels = list(
      enabled = T,
      align = "left",
      verticalAlign = "top",
      style = list(fontSize = "9px", textOutline = FALSE, color = "black", fontFamoly = "Open Sans Light")
      ),
    style = list(fontSize = "8px", textOutline = FALSE, color = "black")
  )
)

hchart(
  data_to_hierarchical(temp1, c(agregado, tema), prop, colors = cols),
  type = "treemap",
  levelIsConstant = T,
  allowDrillToNode = T,
  drillUpButton = list(
    text = "< Volver"
  ),
  levels = lvl_opts,
  tooltip = list(valueDecimals = 2)
) %>% 
  hc_chart(
    style = list(fontFamily = "Open Sans")
  ) %>% 
  hc_tooltip(backgroundColor = "white", borderWidth = 0.001, valueSuffix = "%") %>% 
  hc_size(height = 700) %>% 
  hc_credits(
    enabled = TRUE,
    text = "(enero 2010 - junio 2020)",
    style = list(fontFamily = "Open Sans", fontSize = 13)
  ) -> general


# heat map de temas por paises
temp %>% 
  group_split(pais) %>% 
  map(., ~group_by(., pais) %>% 
        count(agregado) %>% 
        mutate(
          pro = prop.table(n)*100
        ) %>% 
        mutate_if(is.numeric, round, 1)) %>% 
  bind_rows() -> temp2


hchart(
  temp2, 
  "heatmap", 
  hcaes(
    x = pais,
    y = agregado, 
    value = pro
  )
) %>% 
  hc_colorAxis(
    stops = color_stops(4, c("#222438", "#E07A5F", "#F2CC8F", "#BBEAD3"))
  ) %>% 
  hc_yAxis(mayorGridLineWidth = 2, gridLineColor = "black", title = list(text = "Temas agregados")) %>% 
  hc_xAxis(mayorGridLineWidth = 2,  gridLineColor = "black", 
           title = list(text = NULL)) %>% 
  hc_chart(backgroundColor="white", borderColor = "transparent", 
           style=list(fontFamily = "Open Sans", fontSize = 12)) %>% 
  hc_tooltip(enabled = T, valueDecimals = 2, borderWidth = 0.01, 
             backgroundColor = "white",  style = list(fontFamily = "Open Sans"),
             pointFormat=paste("<b>{point.pais}</b> concentra el <b>{point.pro}</b> % de sus aplicaciones en <b>{point.agregado}</b>"),
             headerFormat = "")
  
  
temp %>% 
  group_split(pais) %>% 
  map(., ~group_by(., pais) %>% 
        count(tema) %>% 
        mutate(
          pro = prop.table(n)*100
        ) %>% 
        mutate_if(is.numeric, round, 1)) %>% 
  bind_rows() -> temp3



hchart(
  temp3, 
  "heatmap", 
  hcaes(
    x = pais,
    y = tema, 
    value = pro
  )
) %>% 
  hc_colorAxis(
    stops = color_stops(4, c("#222438", "#E07A5F", "#F2CC8F", "#BBEAD3"))
  ) %>% 
  hc_yAxis(mayorGridLineWidth = 2, gridLineColor = "black", title = list(text = "Temas detallados")) %>% 
  hc_xAxis(mayorGridLineWidth = 2,  gridLineColor = "black", 
           title = list(text = NULL)) %>% 
  hc_chart(backgroundColor="white", borderColor = "transparent", 
           style=list(fontFamily = "Open Sans", fontSize = 12)) %>% 
  hc_tooltip(enabled = T, valueDecimals = 2, borderWidth = 0.01, 
             backgroundColor = "white",  style = list(fontFamily = "Open Sans"),
             pointFormat=paste("<b>{point.pais}</b> concentra el <b>{point.pro}</b> % de sus aplicaciones en <b>{point.tema}</b>"),
             headerFormat = "")



temp$tema %>% unique









